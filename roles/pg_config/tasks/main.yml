- name: create superuser
  postgresql_user:
    name: '{{ db.admin_user }}'
    password: '{{ db.admin_password }}'
    role_attr_flags: SUPERUSER
  become: yes
  become_user: postgres

- name: close connections in template1
  environment:
    PGHOST: '{{ db.host }}'
    PGDATABASE: postgres
    PGUSER: '{{ db.admin_user }}'
    PGPASSWORD: '{{ db.admin_password }}'
  shell: psql -c "SELECT pg_terminate_backend(pg_stat_activity.pid) FROM pg_stat_activity WHERE pg_stat_activity.datname = 'template1' AND pid <> pg_backend_pid();"

- name: create database
  postgresql_db:
    login_host: '{{ db.host }}'
    login_user: '{{ db.admin_user }}'
    login_password: '{{ db.admin_password }}'
    maintenance_db: postgres
    name: '{{ db.name }}'
  become: yes
  become_user: postgres

- name: create role
  postgresql_user:
    login_host: '{{ db.host }}'
    login_user: '{{ db.admin_user }}'
    login_password: '{{ db.admin_password }}'
    name: '{{ db.user }}'
    password: '{{ db.password }}'
    db: '{{ db.name }}'
  become: yes
  become_user: postgres

- name: database owner to role
  postgresql_db:
    login_host: '{{ db.host }}'
    login_user: '{{ db.admin_user }}'
    login_password: '{{ db.admin_password }}'
    name: '{{ db.name }}'
    owner: '{{ db.user }}'
  become: yes
  become_user: postgres

- name: revoke all privs
  postgresql_privs:
    login_host: '{{ db.host }}'
    login_user: '{{ db.admin_user }}'
    login_password: '{{ db.admin_password }}'
    database: '{{ db.name }}'
    grant_option: no
    priv: all
    objs: ALL_IN_SCHEMA
    roles: public
  become: yes
  become_user: postgres

- name: grant privs to role
  postgresql_privs:
    login_host: '{{ db.host }}'
    login_user: '{{ db.admin_user }}'
    login_password: '{{ db.admin_password }}'
    database: '{{ db.name }}'
    priv: all
    objs: ALL_IN_SCHEMA
    roles: '{{ db.user }}'
  become: yes
  become_user: postgres

- name: grant default privs to role
  postgresql_privs:
    login_host: '{{ db.host }}'
    login_user: '{{ db.admin_user }}'
    login_password: '{{ db.admin_password }}'
    database: '{{ db.name }}'
    priv: all
    objs: ALL_DEFAULT
    roles: '{{ db.user }}'
    type: default_privs
  become: yes
  become_user: postgres

- name: grant custom privs to admin
  postgresql_privs:
    login_host: '{{ db.host }}'
    login_user: '{{ db.admin_user }}'
    login_password: '{{ db.admin_password }}'
    database: '{{ db.name }}'
    type: group
    roles: '{{ db.admin_user }}'
    objs: '{{ db.user }}'
  become: yes
  become_user: postgres
  ignore_errors: true  # just for production cases where is same user